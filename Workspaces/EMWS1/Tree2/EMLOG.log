*------------------------------------------------------------*
User:                Forge 15 i7
Date:                December 19, 2019
Time:                16:27:43
Site:                12600285
Platform:            X64_8PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                December 19, 2019
Time:                16:27:38
*------------------------------------------------------------*
14715  proc freq data=EMWS1.Tree2_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.Tree2META;
14717  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
14718  proc print data=WORK.Tree2META label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 4 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
14772  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14773  length ORDER $20;
14774  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14775     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14776  set EMWS1.TREE2_OUTCOME_DM( where=(_TYPE_="TARGET"));
14777  NumLevels=2;
14778  select(upcase(ORDER));
14779  when('DESC') ORDER = 'Descending';
14780  when('ASC') ORDER = 'Ascending';
14781  when('FMTDESC') ORDER = 'Formatted Descending';
14782  when('FMTASC') ORDER = 'Formatted Ascending';
14783  otherwise ORDER = 'Descending';
14784  end;
14785  output;
14786  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_OUTCOME_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14787  title9 ' ';
14788  proc print data=WORK.Tree2_EVENT noobs label;
14789  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14790  title9 ' ';
14791  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14792  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14793  title10;
 
"No decisions defined for target "Outcome"."
14794  proc print data = EMWS1.Tree2_Outcome_DM noobs label;
14795  var _type_ variable label;
14796  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14797  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14798  title9 ' ';
14799  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14800  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE2_OUTCOME_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14801  title10;
 
14802  %let EMEXCEPTIONSTRING=;
15336  *------------------------------------------------------------*;
15337  * Tree2: Generation of macros and macro variables;
15338  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15339  *------------------------------------------------------------*;
 
15340  %let EMEXCEPTIONSTRING=;
15341  *------------------------------------------------------------*;
15342  * TRAIN: Tree2;
15343  *------------------------------------------------------------*;
15344  %let EM_ACTION = TRAIN;
15345  %let syscc = 0;
15346  %macro main;
15347
15348    %if %upcase(&EM_ACTION) = CREATE %then %do;
15349      filename temp catalog 'sashelp.emmodl.tree_create.source';
15350      %include temp;
15351      filename temp;
15352
15353      %em_tree_create;
15354    %end;
15355
15356     %else
15357     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15358
15359         filename temp catalog 'sashelp.emmodl.tree_train.source';
15360         %include temp;
15361         filename temp;
15362         %em_tree_train;
15363     %end;
15364
15365    %else
15366    %if %upcase(&EM_ACTION) = SCORE %then %do;
15367      filename temp catalog 'sashelp.emmodl.tree_score.source';
15368      %include temp;
15369      filename temp;
15370
15371      %em_tree_score;
15372
15373    %end;
15374
15375    %else
15376    %if %upcase(&EM_ACTION) = REPORT %then %do;
15377
15378         filename temp catalog 'sashelp.emmodl.tree_report.source';
15379         %include temp;
15380         filename temp;
15381
15382         %em_tree_report;
15383     %end;
15384
15385    %else
15386    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15387
15388         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15389         %include temp;
15390         filename temp;
15391         %EM_TREE_OPENTREEVIEWER;
15392
15393     %end;
15394
15395    %else
15396    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15397
15398         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15399         %include temp;
15400         filename temp;
15401         %EM_TREE_CLOSETREEVIEWER;
15402
15403     %end;
15404
15405
15406     %doendm:
15407  %mend main;
15408
15409  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15411 +%macro em_tree_train;
15413 +   %if &EM_IMPORT_DATA eq %then %do;
15414 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15415 +       %put &em_codebar;
15416 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15417 +       %put &errormsg;
15418 +       %put &em_codebar;
15419 +       %goto doendm;
15420 +   %end;
15421 +   %else
15422 +       %let EMEXCEPTIONSTRING =;
15424 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15425 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15426 +        %put &em_codebar;
15427 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15428 +        %put &errormsg;
15429 +        %put &em_codebar;
15430 +        %goto doendm;
15431 +   %end;
15433 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15434 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15435 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15436 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15437 +        %put &em_codebar;
15438 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15439 +        %put &errormsg;
15440 +        %put &em_codebar;
15441 +        %goto doendm;
15442 +   %end;
15444 +   /* Initialize property macro variables */
15445 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15446 +   %include temp;
15447 +   filename temp;
15449 +   %EM_SetProperties;
15451 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15452 +   %EM_GETNAME(key=EMTREE, type=DATA);
15453 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15454 +     /* if import eq Y and no importtable defined, throw an exception */
15455 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15456 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15457 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15458 +         %put &em_codebar;
15459 +         %put &errmsg;
15460 +         %put &em_codebar;
15461 +         %goto doendm;
15462 +      %end;
15463 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15464 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15465 +         %put &em_codebar;
15466 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15467 +         %put &errormsg;
15468 +         %put &em_codebar;
15469 +         %goto doendm;
15470 +      %end;
15471 +      %else %do;
15472 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15473 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15474 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15475 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15476 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15477 +         %let dsid = %sysfunc(close(&dsid));
15478 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15479 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15480 +            %put &em_codebar;
15481 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15482 +            %put &errormsg;
15483 +            %put &em_codebar;
15484 +            %goto doendm;
15485 +         %end;
15486 +      %end;
15487 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15488 +         proc delete data=&EM_USER_EMTREE;
15489 +         run;
15490 +      %end;
15491 +   %end;
15492 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15493 +      proc delete data=&EM_USER_EMTREE;
15494 +      run;
15495 +   %end;
15497 +   /* load tree macros */
15498 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15499 +   %include temp;
15500 +   filename temp;
15502 +   /* data sets */
15503 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15504 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15505 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15507 +   /* files */
15508 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15510 +   /* check actual num of target levels */
15511 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15512 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15513 +                              nLevel=_nTargetLevel );
15514 +      %if &_nTargetLevel  > 2 %then %do;
15515 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15516 +        %put &em_codebar;
15517 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15518 +        %put &errormsg;
15519 +        %put &em_codebar;
15520 +        %goto doendm;
15521 +      %end;
15522 +   %end;
15524 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15525 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15526 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15527 +        %let costflag=0;
15528 +        data _null_;
15529 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15530 +          if eof then call symput("costflag", _N_);
15531 +        run;
15532 +        %if &costflag gt 0 %then %do;
15533 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15534 +          %put &em_codebar;
15535 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15536 +          %put &errormsg;
15537 +          %put &em_codebar;
15538 +          %goto doendm;
15539 +       %end;
15540 +     %end;
15541 +   %end;
15543 +   /* determine if multiple targets will be processed */
15544 +   %let em_tree_multipleTargets=N;
15545 +   %let em_tree_numTarget = 1;
15546 +   %let em_tree_targetVars=;
15548 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15549 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15550 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15551 +         %let em_tree_multipleTargets=N;
15552 +      %end;
15553 +      %else %do;
15554 +         /* create macro array of targets  */
15555 +         data _null_;
15556 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15557 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15558 +           if eof then
15559 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15560 +        run;
15562 +        %if &em_tree_numTarget gt 1 %then %do;
15563 +           %let em_tree_multipleTargets=Y;
15564 +        %end;
15565 +      %end;
15566 +   %end;
15568 +   /* create view of only necessary variable for performance reasons */
15569 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15570 +   data &tempData / view=&tempData;
15571 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15572 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15573 +       %EM_TARGET
15574 +     %end;
15575 +     %else %do;
15576 +       %if &em_tree_numTarget ne 0 %then %do;
15577 +         %do i=1 %to &em_tree_numTarget;
15578 +            &&em_tree_targetVars&i
15579 +         %end;
15580 +       %end;
15581 +     %end;
15582 +     );
15583 +   run;
15585 +   /* run Tree procedure */
15586 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15588 +   /* Check return code and throw exception if error is detected */
15589 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15590 +   %if &syserr %then %do;
15591 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15592 +     %goto doendm;
15593 +   %end;
15595 +   /* add decision score code if multiple targets are processed */
15596 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15597 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15598 +   %end;
15600 +   /* create outfit dataset if multiple score statements have been executed */
15601 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15603 +   /* create English Rules */
15604 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15605 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15606 +       %em_tree_makeEnglishRules;
15608 +       /* English Rules */
15609 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15611 +     %end;
15612 +   filename x;
15614 +   %doendm:
15615 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15616 +%macro EM_SetProperties;
15618 +   /* train properties */
15619 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15654 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15658 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15661 +   /* properties for interactive sample */
15662 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15667 +   /* report properties */
15668 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15673 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15674 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15675 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15677 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15678 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15679 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15680 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15682 +   /* score properties */
15683 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15684 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15686 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE2_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15688 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15689 +  %global &nLevel;
15690 +  proc dmdb batch data=&indata
15691 +    classout=_tmp_dmdbout;
15692 +    class &target;
15693 +  run;
15694 +  data _tmp_dmdbout;
15695 +    set _tmp_dmdbout;
15696 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15697 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15698 +  run;
15699 +  data _null_;
15700 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15701 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15702 +    %let dsid = %sysfunc(close(&dsid));
15703 +     call symput("&nLevel", put(&_obs, Best12.));
15704 +  run;
15706 +  proc datasets lib=work nolist;
15707 +     delete _tmp_dmdbout;
15708 +  run;
15709 +  quit;
15710 +%Mend EM_CheckBinaryTargetLevel;
15713 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15715 +  /* determine the number of obs in training data */
15716 +  proc sql;
15717 +    reset noprint;
15718 +    select count(*) into :em_nobs from &indata;
15719 +  quit;
15721 +  /* determine the number of input variables */
15722 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15723 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15725 +  /* retrieve targetEvent from decmeta */
15726 +  %let targetEvent=;
15727 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15728 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15729 +      data _null_;
15730 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15731 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15732 +      run;
15733 +    %end;
15734 +  %end;
15736 +  /* create targetTable if multipleTar eq Y */
15737 +  data temptarget;
15738 +    set &EM_DATA_VARIABLESET;
15739 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15740 +  run;
15742 + /* data sets */
15743 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15744 + %EM_GETNAME(key=EMTREE,        type=DATA);
15745 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15746 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15747 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15748 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15749 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15750 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15751 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15752 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15754 + /* files */
15755 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15756 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15758 + /* turn on pmml if requested */
15759 + %let nnpmml=0;
15760 + %if %symexist(EM_PMML) %then %do;
15761 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15762 +       %let nnpmml=1;
15764 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15765 +%end;
15767 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15769 + %if &nnpmml or &numClassTarget %then %do;
15771 +       /* create dmdb needed for pmml generation */
15772 +       %let tree_maxlevel = 512;
15773 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15774 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15775 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15776 +         %end;
15777 +       %end;
15778 +       %if &tree_maxlevel gt 0 %then %do;
15779 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15780 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15781 +       %end;
15783 +       %let targetOrderString =;
15784 +       %let targetString = ;
15785 +       data _null_;
15786 +          length orderString nameString $10000;
15787 +          retain orderString nameString;
15788 +          set &em_data_variableset end=eof;
15789 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15790 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15791 +          %end;
15792 +          %else %do;
15793 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15794 +          %end;          select(order);
15795 +            when('')        order ='DESC';
15796 +            when('FMTASC')  order='ASCFMT';
15797 +            when('FMTDESC') order='DESFMT';
15798 +            otherwise;
15799 +          end;
15800 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15801 +          nameString = trim(nameString)!!' '!!trim(NAME);
15803 +          if eof then do;
15804 +             call symput('targetOrderString', trim(orderString));
15805 +             call symput('targetString', trim(nameString));
15806 +          end;
15807 +       run;
15809 +       %let arborkluge= "work._treeDMDB";
15811 +       proc dmdb batch data=&indata
15812 +       %if &nnpmml %then %do;
15813 +           PMML
15814 +       %end;
15815 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15818 +   %if &nnpmml %then %do;
15819 +        %if "%EM_ID" ne "" %then %do;
15820 +          id %EM_ID;
15821 +        %end;
15822 +        %if &EM_NUM_CLASS gt 0 %then %do;
15823 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15824 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15825 +               &targetOrderString;
15826 +        %end;
15827 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15828 +          var %EM_INTERVAL;
15829 +        %end;
15830 +        target &targetString %EM_INTERVAL_TARGET;
15831 +        %if "%EM_FREQ" ne "" %then %do;
15832 +          freq %EM_FREQ;
15833 +        %end;
15834 +  %end;
15835 +  %else %do;
15836 +      class  &targetOrderString;
15837 +      target &targetString %EM_INTERVAL_TARGET;
15838 +  %end;
15839 +       run;
15840 +       quit;
15842 +       proc datasets lib=work nolist;
15843 +          delete classout varout;
15844 +       run;
15845 +       quit;
15847 +    %end;
15848 + %end;
15850 + /* run Arbor procedure */
15851 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15852 +  proc arbor data=&INDATA
15854 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15855 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15856 +  %end;
15858 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15859 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15860 +  %end;
15862 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15863 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15864 +  %end;
15866 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15867 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15868 +  %end;
15870 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15871 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15872 +  %end;
15874 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15875 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15876 +  %end;
15877 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15878 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15879 +  %end;
15880 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15881 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15882 +  %end;
15884 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15885 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15886 +      alpha = &EM_PROPERTY_SIGLEVEL
15887 +    %end;
15888 +  %end;
15890 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15891 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15892 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15893 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15894 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15896 +        padjust =
15897 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15898 +          &chaid
15899 +        %end;
15900 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15901 +          DEPTH
15902 +        %end;
15903 +      %end;
15904 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15905 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15906 +         pvars = &num_inputs
15907 +      %end;
15908 +    %end;
15909 +  %end;
15910 +  %else %do;
15911 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15912 +         padjust = NONE
15913 +      %end;
15914 +  %end;
15916 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15917 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15918 +    Maxrules = &num_nrules
15919 +  %end;
15921 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15922 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15923 +    Maxsurrs = &num_nsurrs
15924 +  %end;
15926 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15927 +     Missing=&EM_PROPERTY_MISSINGVALUE
15928 +  %end;
15930 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15931 +     USEVARONCE
15932 +  %end;
15934 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15935 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15936 +  %end;
15939 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15940 +    event = "&targetEvent"
15941 +  %end;
15943 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15944 +     DECSEARCH
15945 +  %end;
15947 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15948 +     PRIORSSEARCH
15949 +  %end;
15951 +  %if &arbor_1 ne %then %do;
15952 +    &arbor_1
15953 +  %end;
15955 +  %if &em_arbor ne %then %do;
15956 +     &em_arbor
15957 +  %end;
15958 +  ;
15959 + %end;
15960 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15961 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15962 +       interact;
15963 + %end;
15964 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15965 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15966 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15967 +    %put &em_codebar;
15968 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15969 +    %put &errormsg;
15970 +    %put &em_codebar;
15971 +    %goto doendm;
15972 +   %end;
15973 +   %else %do;
15974 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15975 +       interact;
15976 +   %end;
15977 + %end;
15979 + %else %do;
15980 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15981 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15982 +    %put &em_codebar;
15983 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15984 +    %put &errormsg;
15985 +    %put &em_codebar;
15986 +    %goto doendm;
15987 +   %end;
15988 +   %else %do;
15989 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15990 +        interact;
15991 +   %end;
15992 + %end;
15994 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15995 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15996 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15997 +    %end;
15999 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
16000 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
16001 +    %end;
16003 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
16004 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
16005 +    %end;
16007 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16008 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16009 +    %end;
16011 +    %if "%EM_FREQ" ne "" %then %do;
16012 +       freq %EM_FREQ;
16013 +    %end;
16015 +    %if "&multipleTar" eq "Y" %then %do;
16016 +       /* cycle through all target vars in variableset */
16017 +       %let tdsid = %sysfunc(open(temptarget));
16018 +       %if &tdsid %then %do;
16019 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16020 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16021 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16022 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16023 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16024 +             target &var / level = &lvl
16025 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16026 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16027 +             %end;
16028 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16029 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16030 +             %end;
16031 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16032 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16033 +             %end;
16034 +          %end;
16035 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16036 +       %end;
16037 +       useTarget variable = %EM_TARGET;
16038 +    %end;
16039 +    %else %do;
16040 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16041 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16042 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16043 +      %end;
16044 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16045 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16046 +      %end;
16047 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16048 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16049 +      %end;
16050 +    %end;
16052 +    %if "&multipleTar" eq "N" %then %do;
16053 +      &EM_DEC_STATEMENT;
16054 +    %end;
16056 +    Performance &EM_PROPERTY_PERFORMANCE
16057 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16058 +      nodesize=&EM_PROPERTY_NODESAMPLE
16059 +    %end;
16060 +    ;
16062 +    %if "&intFlag" eq "Y" %then %do;
16063 +       INTERACT Largest;
16064 +       Train maxnewdepth=0;
16065 +    %end;
16067 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16068 +         Assess
16069 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16070 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16071 +              %put &em_codebar;
16072 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16073 +              %put &errormsg;
16074 +              %put &em_codebar;
16075 +            %end;
16076 +            %else %do;
16077 +               Validata=&EM_IMPORT_VALIDATE
16078 +            %end;
16079 +         %end;
16080 +         %else %do;
16081 +           NoValidata
16082 +         %end;
16083 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16084 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16085 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16086 +               %if &dsid %then %do;
16087 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16088 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16089 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16090 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16091 +                   %else %do;
16092 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16093 +                      %else %let measure= MISC;
16094 +                   %end;
16095 +                 %end;
16096 +               %end;
16097 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16098 +            %end;
16099 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16100 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16101 +                 %let measure=ASE;
16102 +              %end;
16103 +              %else %do;
16104 +                 %let measure=MISC;
16105 +              %end;
16106 +            %end;
16107 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16108 +              %let measure=ASE;
16109 +            %end;
16110 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16111 +               %let measure = LIFT;
16112 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16113 +               %if &dsid %then %do;
16114 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16115 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16116 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16117 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16118 +                 %end;
16119 +               %end;
16120 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16121 +            %end;
16122 +            measure=&measure
16123 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16124 +               event = "&targetEvent"
16125 +            %end;
16126 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16127 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16128 +            %end;
16129 +         %end;
16130 +         %if "&multipleTar" eq "N" %then %do;
16131 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16132 +               CV
16133 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16134 +                 CVNITer = &EM_PROPERTY_CVNITER
16135 +               %end;
16136 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16137 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16138 +               %end;
16139 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16140 +                 CVSeed = &EM_PROPERTY_CVSEED
16141 +               %end;
16142 +            %end;
16143 +         %end;
16144 +       %end;
16145 +      ;
16147 +      %if "&intFlag" ne "Y" %then %do;
16148 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16149 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16150 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16151 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16153 +          SUBTREE &subtree
16154 +          %if "&subtree" eq "NLEAVES" %then %do;
16155 +            =&EM_PROPERTY_NSUBTREE
16156 +          %end;
16157 +          ;
16158 +        %end;
16160 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16161 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16162 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16163 +          %end;
16164 +       %end;
16165 +      %end;
16166 + %end;
16169 + MakeMacro nleaves = nleaves;
16170 + save
16171 + %if "&EM_USER_EMTREE" ne "" %then %do;
16172 +   MODEL=&EM_USER_EMTREE
16173 + %end;
16174 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16175 +   SEQUENCE=&EM_USER_OUTSEQ
16176 + %end;
16177 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16178 +   IMPORTANCE=&EM_USER_OUTIMPORT
16179 + %end;
16180 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16181 +   NODESTAT=&EM_USER_OUTNODES
16182 + %end;
16183 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16184 +   SUMMARY=&EM_USER_OUTSUMMARY
16185 + %end;
16186 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16187 +   STATSBYNODE=&EM_USER_OUTSTATS
16188 + %end;
16189 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16190 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16191 + %end;
16192 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16193 +   Pathlistnonmissing=&EM_USER_OUTPATH
16194 + %end;
16195 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16196 +   RULES = &EM_USER_OUTRULES
16197 + %end;
16198 + ;
16200 + %if "&intFlag" ne "Y" %then %do;
16202 +   %let lookupString = ;
16203 +   %if ^%symexist(EM_OPTION) %then
16204 +      %let EM_OPTION=;
16206 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16207 +      %let lookupString = LOOKUP=SELECT;
16208 +   %end;
16210 +   %let codetext=;
16211 +   %let norescodetxt=;
16213 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16214 +     %let codetext=&codetext DUMMY;
16215 +     %let norescodetxt=&norescodetxt DUMMY;
16216 +   %end;
16217 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16218 +     %let codetext=&codetext NOLEAFID;
16219 +     %let norescodetxt=&norescodetxt NOLEAFID;
16220 +   %end;
16221 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16222 +     %let norescodetxt=&norescodetxt NOPRED;
16223 +   %end;
16225 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16226 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16228 +   %if &nnpmml %then %do;
16229 +     code pmml;
16230 +   %end;
16232 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16233 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16234 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16235 +   %end;
16236 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16237 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16238 +   %end;
16239 + %end;
16241 + run;
16242 + quit;
16244 + /*%em_checkerror(); */
16245 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16246 +   /* Delete DMDB catalog */
16247 +   proc datasets lib=work nolist;
16248 +       delete _treeDMDB / mt=cat;
16249 +  run;
16250 +  %end;
16252 + %if &nnpmml %then %do;
16253 +    ods pmml close;
16254 + %end;
16256 +  %doendm:
16258 +%mend em_tree_runTreeProcedure;
16260 +%macro em_tree_createFitStats( multipleTar= );
16263 +  /* create targetTable is multipleTar eq Y */
16264 +  data temptarget;
16265 +    set &EM_DATA_VARIABLESET;
16266 +    where ROLE="TARGET";
16267 +  run;
16269 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16270 +   data &EM_USER_EMOUTFIT;
16271 +     length target $32;
16272 +     merge work.fit_train
16273 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16274 +       work.fit_valid
16275 +     %end;
16276 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16277 +       work.fit_test
16278 +     %end;
16279 +     ;
16280 +     %if "&multipleTar" eq "N" %then %do;
16281 +       target="%EM_TARGET";
16282 +     %end;
16283 +     %else %do;
16284 +       target = _TARGET_;
16285 +     %end;
16286 +     drop _NW_ _SUMW_
16287 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16288 +        _VSUMW_
16289 +     %end;
16290 +     ;
16291 +   run;
16293 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16294 +     proc datasets library=work nolist;
16295 +       delete fit_valid;
16296 +     run;
16297 +   %end;
16298 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16299 +     proc datasets library=work nolist;
16300 +       delete fit_test;
16301 +     run;
16302 +   %end;
16304 +%mend em_tree_createFitStats;
16307 +%macro em_tree_makeEnglishRules;
16309 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16310 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16312 +  /* verify that necessary tables exist and if not, skip processing */
16313 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16314 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16315 +    %goto doendm;
16316 +  %end;
16317 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16318 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16319 +    %goto doendm;
16320 +  %end;
16322 +  /* determine length of variable in outpath dataset */
16323 +  %let vlength= ;
16324 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16325 +  %if &dsid ne %then %do;
16326 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16327 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16328 +  %end;
16329 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16331 +  data tempoutpath;
16332 +    length varname $&vlength;
16333 +    retain varname;
16334 +    set &EM_USER_OUTPATH;
16336 +    if ^missing(variable) then varname=variable;
16337 +    else if ^missing(var_name) then varname=var_name;
16338 +    output;
16339 +  run;
16341 +  /* create an array of generated predicted variable names */
16342 +  %let tree_pred_vars = ;
16343 +  %let tree_pred_label = ;
16344 +  %let numpred= 0;
16345 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16347 +    data _null_;
16348 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16349 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16350 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16351 +     if eof then
16352 +       call symput('numpred', strip(put(_N_, BEST.)));
16353 +    run;
16354 +  %end;
16356 +  /* determine if NPRIORS exists in outnodes  */
16357 +  %local nprior_flag;
16358 +  data _null_;
16359 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16360 +    if eof then do;
16361 +      call symput('nprior_flag', strip(put(npriors, best.)));
16362 +    end;
16363 +  run;
16365 +  proc sort data=tempoutpath; by node; run;
16366 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16368 +  data tempoutpath;
16369 +    merge tempoutpath(in=_a) outnodes(keep= node
16370 +    %if "&nprior_flag" ne "." %then %do;
16371 +      NPRIORS
16372 +    %end;
16373 +    %else %do;
16374 +      N
16375 +    %end;
16376 +    %if &numpred gt 0 %then %do;
16377 +      %do i=1 %to &numpred;
16378 +        &&tree_pred_vars&i
16379 +      %end;
16380 +    %end;
16381 +    );
16382 +    by node;
16383 +    if _a;
16384 +  run;
16386 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16388 +  data _null_;
16389 +    file x;
16390 +    set tempoutpath;
16391 +    by node descending varname;
16392 +    retain origvar oldnode string;
16393 +    length origvar $32 oldnode 8 string $200;
16395 +    if _N_ = 1 then do;
16396 +      origvar = varname;
16397 +      oldnode = node;
16398 +    end;
16400 +    if first.node then do;
16401 +       put "&EM_CODEBAR";
16402 +       put " Node = " node;
16403 +       put "&EM_CODEBAR";
16404 +    end;
16406 +      if first.varname then do;
16407 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16408 +            if MISSING(CHARACTER_VALUE) then do;
16409 +             if NUMERIC_VALUE ne .  then do;
16410 +              if ^first.node then do;
16411 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16412 +              end;
16413 +              else do;
16414 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16415 +              end;
16416 +             end;
16417 +            end;
16418 +            else do;
16419 +              if ^first.node then do;
16420 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16421 +              end;
16422 +              else do;
16423 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16424 +              end;
16425 +             end;
16426 +         end;
16427 +         else if RELATION in ("=") then do;
16428 +            if ^first.node then do;
16429 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16430 +            end;
16431 +            else do;
16432 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16433 +            end;
16434 +         end;
16435 +         else if RELATION in ("ISMISSING") then do;
16436 +            if ^first.node then do;
16437 +              string = " AND "|| strip(varname) || " equals Missing";
16438 +            end;
16439 +            else do;
16440 +              string = "if "|| strip(varname) ||" equals Missing";
16441 +            end;
16442 +         end;
16443 +         else if RELATION in ("ISNOTMISSING") then do;
16444 +            if ^first.node then do;
16445 +              string = " AND "|| strip(varname) || " equals All Values";
16446 +            end;
16447 +            else do;
16448 +              string = "if "|| strip(varname) ||" equals All Values";
16449 +            end;
16450 +         end;
16451 +         if ^missing(varname) then origvar = varname;
16452 +         oldnode=node;
16454 +      end;
16455 +      else do;
16456 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16457 +          if MISSING(CHARACTER_VALUE) then do;
16458 +           if  NUMERIC_VALUE ne .  then do;
16459 +            if ^MISSING(string) then
16460 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16461 +            else
16462 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16463 +           end;
16464 +          end;
16465 +          else do;
16466 +            if ^MISSING(string) then
16467 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16468 +            else
16469 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16470 +          end;
16472 +         end;
16473 +         else if RELATION in ("=") then do;
16474 +           string = strip(string)||", "||strip(character_value);
16475 +         end;
16476 +         else if RELATION in ("ISMISSING") then do;
16478 +         end;
16479 +         if ^missing(varname) then origvar = varname;
16480 +         oldnode=node;
16481 +      end;
16482 +      if last.varname then do;
16483 +         if RELATION in ("ISMISSING") then do;
16484 +           if ^first.varname then do;
16485 +             string = strip(string) || " or MISSING";
16486 +           end;
16487 +         end;
16488 +         put string;
16489 +         if ^missing(varname) then origvar = varname;
16490 +         oldnode=node;
16491 +      end;
16493 +      if last.node then do;
16494 +         put "then ";
16495 +         put " Tree Node Identifier   = " node;
16497 +         %if "&nprior_flag" ne "." %then %do;
16498 +           put " Number of Observations = " NPRIORS;
16499 +         %end;
16500 +         %else %do;
16501 +           put " Number of Observations = " N;
16502 +         %end;
16504 +         %if &numpred gt 0 %then %do;
16505 +           %do i=1 %to &numpred;
16506 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16507 +           %end;
16508 +         %end;
16510 +         put " ";
16511 +         if ^missing(varname) then origvar = varname;
16512 +         oldnode=node;
16513 +      end;
16515 +  run;
16517 +  proc datasets lib=work nolist;
16518 +    delete tempoutpath outnodes;
16519 +  run;
16521 +  %doendm:
16522 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 13   Memory used = 511K.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 13 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: There were 13 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
NOTE: There were 13 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 13 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_OUTCOME_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 13   Memory used = 511K.
NOTE: There were 13 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 13 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 13 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
Validation data is not valid with Cross Validation property set to Yes.
*------------------------------------------------------------*
NOTE: 1544661 kilobytes of physical memory.
NOTE: Will use 13 out of 13 training cases.
NOTE: Using memory pool with 64643072 bytes.
NOTE: Passed training data 2 times.
NOTE: Training used 13656 bytes of work memory.
NOTE: The subtree sequence contains 2 subtrees. The largest has 3 nodes and 2 leaves.
NOTE: Passed training data 1 times.
NOTE: Using subtree with 1 nodes and 1 leaves.
NOTE: Using subtree with 3 nodes and 2 leaves.
NOTE: Created macro variable NLEAVES equal to 2.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 8 observations and 8 variables.
NOTE: The data set EMWS1.TREE2_EMTREE has 252 observations and 4 variables.
NOTE: The data set EMWS1.TREE2_OUTNODES has 3 observations and 20 variables.
NOTE: The data set EMWS1.TREE2_OUTPATH has 5 observations and 7 variables.
NOTE: The data set EMWS1.TREE2_OUTRULES has 22 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 2 observations and 21 variables.
NOTE: The data set EMWS1.TREE2_OUTSTATS has 15 observations and 5 variables.
NOTE: The data set EMWS1.TREE2_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTTOPOLOGY has 3 observations and 5 variables.
NOTE: External file C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\TREEFLOW.sas opened.
NOTE: External file C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 13 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 13 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 8 observations read from the data set EMWS1.PART2_VALIDATE.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
NOTE: View EMWS1.IMPT_TEST.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 14 observations read from the data set EMWS1.PART2_TEST.
 
 
NOTE: There were 13 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.18 seconds
 
NOTE: There were 13 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 13 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.27 seconds
      cpu time            0.20 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set EMWS1.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTCOME_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 5 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 3 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 3 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 5 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 5 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=19Dec2019:16:27:40,
      Create Time=18Dec2019:11:01:27
 
NOTE: 20 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 5 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
16524
16525  *------------------------------------------------------------*;
16526  * End TRAIN: Tree2;
16527  *------------------------------------------------------------*;
 
16528  *------------------------------------------------------------*;
16529  * Close any missing semi colons;
16530  *------------------------------------------------------------*;
16531  ;
16532  ;
16533  ;
16534  ;
16535  quit;
16536  *------------------------------------------------------------*;
16537  * Close any unbalanced quotes;
16538  *------------------------------------------------------------*;
16539  /*; *"; *'; */
16540  ;
16541  run;
16542  quit;
16543  /* Reset EM Options */
16544  options formchar="|----|+|---+=|-/\<>*";
16545  options nocenter ls=256 ps=10000;
16546  goptions reset=all device=GIF NODISPLAY;
 
16547  proc sort data=WORK.EM_USER_REPORT;
16548  by ID VIEW;
16549  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                December 19, 2019
Time:                16:27:40
*------------------------------------------------------------*
16651  %let EMEXCEPTIONSTRING=;
16652  *------------------------------------------------------------*;
16653  * SCORE: Tree2;
16654  *------------------------------------------------------------*;
16655  %let EM_ACTION = SCORE;
16656  %let syscc = 0;
16657  %macro main;
16658
16659    %if %upcase(&EM_ACTION) = CREATE %then %do;
16660      filename temp catalog 'sashelp.emmodl.tree_create.source';
16661      %include temp;
16662      filename temp;
16663
16664      %em_tree_create;
16665    %end;
16666
16667     %else
16668     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16669
16670         filename temp catalog 'sashelp.emmodl.tree_train.source';
16671         %include temp;
16672         filename temp;
16673         %em_tree_train;
16674     %end;
16675
16676    %else
16677    %if %upcase(&EM_ACTION) = SCORE %then %do;
16678      filename temp catalog 'sashelp.emmodl.tree_score.source';
16679      %include temp;
16680      filename temp;
16681
16682      %em_tree_score;
16683
16684    %end;
16685
16686    %else
16687    %if %upcase(&EM_ACTION) = REPORT %then %do;
16688
16689         filename temp catalog 'sashelp.emmodl.tree_report.source';
16690         %include temp;
16691         filename temp;
16692
16693         %em_tree_report;
16694     %end;
16695
16696    %else
16697    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16698
16699         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16700         %include temp;
16701         filename temp;
16702         %EM_TREE_OPENTREEVIEWER;
16703
16704     %end;
16705
16706    %else
16707    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16708
16709         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16710         %include temp;
16711         filename temp;
16712         %EM_TREE_CLOSETREEVIEWER;
16713
16714     %end;
16715
16716
16717     %doendm:
16718  %mend main;
16719
16720  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16722 +%macro em_tree_score;
16724 +   /* determine if multiple targets will be processed */
16725 +   %let em_tree_multipleTargets=N;
16726 +   %let em_tree_numTarget=1;
16727 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16728 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16729 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16730 +         %let em_tree_multipleTargets=N;
16731 +      %end;
16732 +      %else %do;
16733 +         /* create macro array of targets  */
16734 +         data _null_;
16735 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16736 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16737 +           if eof then
16738 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16739 +        run;
16741 +        %if &em_tree_numTarget gt 1 %then %do;
16742 +           %let em_tree_multipleTargets=Y;
16743 +        %end;
16744 +      %end;
16745 +   %end;
16747 +   /* build flow and publish scoring code */
16748 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16749 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16751 +   filename treeflow "&EM_USER_TREEFLOW";
16752 +   filename treepub "&EM_USER_TREEPUBLISH";
16754 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16755 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16757 +   %em_copyfile(infref=treeflow, outfref=flowref);
16758 +   %em_copyfile(infref=treepub, outfref=pubref);
16760 +   filename treeflow;
16761 +   filename treepub;
16763 +   /* if priors are used, add code to generate unadjusted residuals in export */
16764 +   %let useAdjPriors = N;
16765 +   data _null_;
16766 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16767 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16768 +   run;
16769 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16770 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16771 +      %include temp;
16772 +      filename temp;
16774 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16775 +      filename adjref "&EM_USER_adjResidualCode";
16776 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16778 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16780 +      filename adjref;
16781 +   %end;
16783 +   /* LEAF */
16784 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16785 +      data _null_;
16786 +        file flowref mod;
16787 +        put 'drop _LEAF_;';
16788 +      run;
16790 +      data _null_;
16791 +        file pubref mod;
16792 +        put 'drop _LEAF_;';
16793 +      run;
16795 +   %end;
16797 +   filename flowref;
16798 +   filename pubref;
16800 +   /* em_metachange code */
16801 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16802 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16803 +   %end;
16805 +   /* variable selection based on importance stat    */
16806 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16807 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16808 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16809 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16810 +     %let obs = %sysfunc(fetch(&dsid));
16811 +     %do %while(&obs=0);
16812 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16813 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16814 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16815 +       %let obs = %sysfunc(fetch(&dsid));
16816 +     %end;
16817 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16818 +   %end;
16820 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16821 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16822 +    %let tree_pred_vars = ;
16823 +    %let tree_pred_lvl =;
16824 +    %let numpred= 0;
16826 +    data _null_;
16827 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16828 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16829 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16830 +     if eof then
16831 +       call symput('numpred', strip(put(_N_, BEST.)));
16832 +    run;
16833 +   %end;
16835 +   %if &numpred ne 0 %then %do;
16836 +    %do i=1 %to &numpred;
16837 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16838 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16839 +    %end;
16840 +   %end;
16842 +   /* determine if multiple targets will be processed */
16843 +   %let em_tree_multipleTargets=N;
16844 +   %let em_tree_numTarget=1;
16845 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16846 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16847 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16848 +         %let em_tree_multipleTargets=N;
16849 +      %end;
16850 +      %else %do;
16851 +        data _null_;
16852 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16853 +          if eof then
16854 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16855 +        run;
16857 +        %if &em_tree_numTarget gt 1 %then %do;
16858 +           %let em_tree_multipleTargets=Y;
16859 +        %end;
16860 +     %end;
16861 +   %end;
16863 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16864 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16866 +      /* variable importance */
16867 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16868 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16870 +         %let validexist=0;
16871 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16872 +           %let validexist=1;
16873 +         %end;
16875 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16876 +         /* and the columns may not be generated                                                                                 */
16877 +         %let em_tree_cvexists=;
16878 +         %let em_tree_surrexists=.;
16879 +         data _null_;
16880 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16881 +            if eof then do ;
16882 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16883 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16884 +            end;
16885 +         run;
16887 +         data &EM_USER_OUTIMPORT;
16888 +            set &EM_USER_OUTIMPORT;
16890 +            /* format columns based on Precison value specified */
16891 +            format importance 15.&EM_PROPERTY_PRECISION
16892 +                 %if &validexist %then %do;
16893 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16894 +                 %end;
16895 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16896 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16897 +                 %end;
16898 +            ;
16899 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16900 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16901 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16902 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16903 +                 %if "&em_tree_surrexists" ne "" %then %do;
16904 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16905 +                 %end;
16906 +                 %if &validexist %then %do;
16907 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16908 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16909 +                 %end;
16910 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16911 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16912 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16913 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16914 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16915 +                 %end;
16916 +            ;
16917 +         run;
16919 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16920 +      %end;
16921 +   %end;
16923 +   %doendm:
16924 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=19Dec2019:16:27:40,
      Create Time=18Dec2019:11:01:27
 
NOTE: 74 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=19Dec2019:16:27:40,
      Create Time=18Dec2019:11:01:27
 
NOTE: 52 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_OUTCOME_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=2536,
      Last Modified=19Dec2019:16:27:40,
      Create Time=18Dec2019:11:01:27
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=1909,
      Last Modified=19Dec2019:16:27:40,
      Create Time=18Dec2019:11:01:27
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTCOME_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: There were 8 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
16925
16926  *------------------------------------------------------------*;
16927  * End SCORE: Tree2;
16928  *------------------------------------------------------------*;
 
16929  proc sort data=WORK.EM_METACHANGE;
16930  by key uname;
16931  run;
 
NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16932  filename x "C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas";
16933  data _null_;
16934  file x;
16935  put 'if upcase(NAME) = "DAILYHIGHESTPRICE_STOCKOPENPRICE" then do;';
16936  put 'ROLE = "REJECTED";';
16937  put 'end;';
16938  put 'else ';
16939  put 'if upcase(NAME) = "DAILYLOWESTPRICE_STOCKOPENPRICE" then do;';
16940  put 'ROLE = "REJECTED";';
16941  put 'end;';
16942  put 'else ';
16943  put 'if upcase(NAME) = "DAILYSTOCKOPEN_PREVCLOSEPRICE" then do;';
16944  put 'ROLE = "REJECTED";';
16945  put 'end;';
16946  put 'else ';
16947  put 'if upcase(NAME) = "HIGH" then do;';
16948  put 'ROLE = "REJECTED";';
16949  put 'end;';
16950  put 'else ';
16951  put 'if upcase(NAME) = "IMP_PRICE" then do;';
16952  put 'ROLE = "REJECTED";';
16953  put 'end;';
16954  put 'else ';
16955  put 'if upcase(NAME) = "LOW" then do;';
16956  put 'ROLE = "REJECTED";';
16957  put 'end;';
16958  put 'else ';
16959  put 'if upcase(NAME) = "OPEN" then do;';
16960  put 'ROLE = "REJECTED";';
16961  put 'end;';
16962  put 'else ';
16963  put 'if upcase(NAME) = "Q_OUTCOME0" then do;';
16964  put 'ROLE = "ASSESS";';
16965  put 'end;';
16966  put 'else ';
16967  put 'if upcase(NAME) = "Q_OUTCOME1" then do;';
16968  put 'ROLE = "ASSESS";';
16969  put 'end;';
16970  put 'else ';
16971  put 'if upcase(NAME) = "_NODE_" then do;';
16972  put 'ROLE = "SEGMENT";';
16973  put 'LEVEL = "NOMINAL";';
16974  put 'end;';
16975  run;
 
NOTE: The file X is:
      Filename=C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=19Dec2019:16:27:40,
      Create Time=17Dec2019:17:18:41
 
NOTE: 40 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 61.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16976  filename x;
NOTE: Fileref X has been deassigned.
 
16977  filename emflow "C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
16978  *------------------------------------------------------------*;
16979  * Tree2: Scoring DATA data;
16980  *------------------------------------------------------------*;
16981  data EMWS1.Tree2_TRAIN
16982  / view=EMWS1.Tree2_TRAIN
16983  ;
16984  set EMWS1.Impt_TRAIN
16985  ;
16986  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
16987 +****************************************************************;
16988 +******             DECISION TREE SCORING CODE             ******;
16989 +****************************************************************;
16990 +
16991 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16992 +LENGTH F_Outcome  $   12;
16993 +LENGTH I_Outcome  $   12;
16994 +LENGTH _WARN_  $    4;
16995 +
16996 +******              LABELS FOR NEW VARIABLES              ******;
16997 +label _NODE_ = 'Node' ;
16998 +label _LEAF_ = 'Leaf' ;
16999 +label P_Outcome0 = 'Predicted: Outcome=0' ;
17000 +label P_Outcome1 = 'Predicted: Outcome=1' ;
17001 +label Q_Outcome0 = 'Unadjusted P: Outcome=0' ;
17002 +label Q_Outcome1 = 'Unadjusted P: Outcome=1' ;
17003 +label R_Outcome0 = 'Residual: Outcome=0' ;
17004 +label R_Outcome1 = 'Residual: Outcome=1' ;
17005 +label F_Outcome = 'From: Outcome' ;
17006 +label I_Outcome = 'Into: Outcome' ;
17007 +label U_Outcome = 'Unnormalized Into: Outcome' ;
17008 +label _WARN_ = 'Warnings' ;
17009 +
17010 +
17011 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17012 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17013 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17014 +
17015 +
17016 +_ARBFMT_12 = PUT( Outcome , BEST.);
17017 + %DMNORMCP( _ARBFMT_12, F_Outcome );
17018 +
17019 +******             ASSIGN OBSERVATION TO NODE             ******;
17020 +IF  NOT MISSING(DailyStockOpen_PrevDayOpen ) AND
17021 +      1.00048419740134 <= DailyStockOpen_PrevDayOpen  THEN DO;
17022 +  _NODE_  =                    3;
17023 +  _LEAF_  =                    2;
17024 +  P_Outcome0  =                    1;
17025 +  P_Outcome1  =                    0;
17026 +  Q_Outcome0  =                    1;
17027 +  Q_Outcome1  =                    0;
17028 +  I_Outcome  = '0' ;
17029 +  U_Outcome  =                    0;
17030 +  END;
17031 +ELSE DO;
17032 +  _NODE_  =                    2;
17033 +  _LEAF_  =                    1;
17034 +  P_Outcome0  =                    0;
17035 +  P_Outcome1  =                    1;
17036 +  Q_Outcome0  =                    0;
17037 +  Q_Outcome1  =                    1;
17038 +  I_Outcome  = '1' ;
17039 +  U_Outcome  =                    1;
17040 +  END;
17041 +
17042 +*****  RESIDUALS R_ *************;
17043 +IF  F_Outcome  NE '0'
17044 +AND F_Outcome  NE '1'  THEN DO;
17045 +        R_Outcome0  = .;
17046 +        R_Outcome1  = .;
17047 + END;
17048 + ELSE DO;
17049 +       R_Outcome0  =  -P_Outcome0 ;
17050 +       R_Outcome1  =  -P_Outcome1 ;
17051 +       SELECT( F_Outcome  );
17052 +          WHEN( '0'  ) R_Outcome0  = R_Outcome0  +1;
17053 +          WHEN( '1'  ) R_Outcome1  = R_Outcome1  +1;
17054 +       END;
17055 + END;
17056 +
17057 +****************************************************************;
17058 +******          END OF DECISION TREE SCORING CODE         ******;
17059 +****************************************************************;
17060 +
17061 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17062  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
17063  quit;
17064  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17065  filename emflow "C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
17066  *------------------------------------------------------------*;
17067  * Tree2: Scoring VALIDATE data;
17068  *------------------------------------------------------------*;
17069  data EMWS1.Tree2_VALIDATE
17070  / view=EMWS1.Tree2_VALIDATE
17071  ;
17072  set EMWS1.Impt_VALIDATE
17073  ;
17074  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
17075 +****************************************************************;
17076 +******             DECISION TREE SCORING CODE             ******;
17077 +****************************************************************;
17078 +
17079 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17080 +LENGTH F_Outcome  $   12;
17081 +LENGTH I_Outcome  $   12;
17082 +LENGTH _WARN_  $    4;
17083 +
17084 +******              LABELS FOR NEW VARIABLES              ******;
17085 +label _NODE_ = 'Node' ;
17086 +label _LEAF_ = 'Leaf' ;
17087 +label P_Outcome0 = 'Predicted: Outcome=0' ;
17088 +label P_Outcome1 = 'Predicted: Outcome=1' ;
17089 +label Q_Outcome0 = 'Unadjusted P: Outcome=0' ;
17090 +label Q_Outcome1 = 'Unadjusted P: Outcome=1' ;
17091 +label R_Outcome0 = 'Residual: Outcome=0' ;
17092 +label R_Outcome1 = 'Residual: Outcome=1' ;
17093 +label F_Outcome = 'From: Outcome' ;
17094 +label I_Outcome = 'Into: Outcome' ;
17095 +label U_Outcome = 'Unnormalized Into: Outcome' ;
17096 +label _WARN_ = 'Warnings' ;
17097 +
17098 +
17099 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17100 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17101 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17102 +
17103 +
17104 +_ARBFMT_12 = PUT( Outcome , BEST.);
17105 + %DMNORMCP( _ARBFMT_12, F_Outcome );
17106 +
17107 +******             ASSIGN OBSERVATION TO NODE             ******;
17108 +IF  NOT MISSING(DailyStockOpen_PrevDayOpen ) AND
17109 +      1.00048419740134 <= DailyStockOpen_PrevDayOpen  THEN DO;
17110 +  _NODE_  =                    3;
17111 +  _LEAF_  =                    2;
17112 +  P_Outcome0  =                    1;
17113 +  P_Outcome1  =                    0;
17114 +  Q_Outcome0  =                    1;
17115 +  Q_Outcome1  =                    0;
17116 +  I_Outcome  = '0' ;
17117 +  U_Outcome  =                    0;
17118 +  END;
17119 +ELSE DO;
17120 +  _NODE_  =                    2;
17121 +  _LEAF_  =                    1;
17122 +  P_Outcome0  =                    0;
17123 +  P_Outcome1  =                    1;
17124 +  Q_Outcome0  =                    0;
17125 +  Q_Outcome1  =                    1;
17126 +  I_Outcome  = '1' ;
17127 +  U_Outcome  =                    1;
17128 +  END;
17129 +
17130 +*****  RESIDUALS R_ *************;
17131 +IF  F_Outcome  NE '0'
17132 +AND F_Outcome  NE '1'  THEN DO;
17133 +        R_Outcome0  = .;
17134 +        R_Outcome1  = .;
17135 + END;
17136 + ELSE DO;
17137 +       R_Outcome0  =  -P_Outcome0 ;
17138 +       R_Outcome1  =  -P_Outcome1 ;
17139 +       SELECT( F_Outcome  );
17140 +          WHEN( '0'  ) R_Outcome0  = R_Outcome0  +1;
17141 +          WHEN( '1'  ) R_Outcome1  = R_Outcome1  +1;
17142 +       END;
17143 + END;
17144 +
17145 +****************************************************************;
17146 +******          END OF DECISION TREE SCORING CODE         ******;
17147 +****************************************************************;
17148 +
17149 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17150  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
17151  quit;
17152  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17153  filename emflow "C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
17154  *------------------------------------------------------------*;
17155  * Tree2: Scoring TEST data;
17156  *------------------------------------------------------------*;
17157  data EMWS1.Tree2_TEST
17158  / view=EMWS1.Tree2_TEST
17159  ;
17160  set EMWS1.Impt_TEST
17161  ;
17162  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
17163 +****************************************************************;
17164 +******             DECISION TREE SCORING CODE             ******;
17165 +****************************************************************;
17166 +
17167 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17168 +LENGTH F_Outcome  $   12;
17169 +LENGTH I_Outcome  $   12;
17170 +LENGTH _WARN_  $    4;
17171 +
17172 +******              LABELS FOR NEW VARIABLES              ******;
17173 +label _NODE_ = 'Node' ;
17174 +label _LEAF_ = 'Leaf' ;
17175 +label P_Outcome0 = 'Predicted: Outcome=0' ;
17176 +label P_Outcome1 = 'Predicted: Outcome=1' ;
17177 +label Q_Outcome0 = 'Unadjusted P: Outcome=0' ;
17178 +label Q_Outcome1 = 'Unadjusted P: Outcome=1' ;
17179 +label R_Outcome0 = 'Residual: Outcome=0' ;
17180 +label R_Outcome1 = 'Residual: Outcome=1' ;
17181 +label F_Outcome = 'From: Outcome' ;
17182 +label I_Outcome = 'Into: Outcome' ;
17183 +label U_Outcome = 'Unnormalized Into: Outcome' ;
17184 +label _WARN_ = 'Warnings' ;
17185 +
17186 +
17187 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17188 +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
17189 +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
17190 +
17191 +
17192 +_ARBFMT_12 = PUT( Outcome , BEST.);
17193 + %DMNORMCP( _ARBFMT_12, F_Outcome );
17194 +
17195 +******             ASSIGN OBSERVATION TO NODE             ******;
17196 +IF  NOT MISSING(DailyStockOpen_PrevDayOpen ) AND
17197 +      1.00048419740134 <= DailyStockOpen_PrevDayOpen  THEN DO;
17198 +  _NODE_  =                    3;
17199 +  _LEAF_  =                    2;
17200 +  P_Outcome0  =                    1;
17201 +  P_Outcome1  =                    0;
17202 +  Q_Outcome0  =                    1;
17203 +  Q_Outcome1  =                    0;
17204 +  I_Outcome  = '0' ;
17205 +  U_Outcome  =                    0;
17206 +  END;
17207 +ELSE DO;
17208 +  _NODE_  =                    2;
17209 +  _LEAF_  =                    1;
17210 +  P_Outcome0  =                    0;
17211 +  P_Outcome1  =                    1;
17212 +  Q_Outcome0  =                    0;
17213 +  Q_Outcome1  =                    1;
17214 +  I_Outcome  = '1' ;
17215 +  U_Outcome  =                    1;
17216 +  END;
17217 +
17218 +*****  RESIDUALS R_ *************;
17219 +IF  F_Outcome  NE '0'
17220 +AND F_Outcome  NE '1'  THEN DO;
17221 +        R_Outcome0  = .;
17222 +        R_Outcome1  = .;
17223 + END;
17224 + ELSE DO;
17225 +       R_Outcome0  =  -P_Outcome0 ;
17226 +       R_Outcome1  =  -P_Outcome1 ;
17227 +       SELECT( F_Outcome  );
17228 +          WHEN( '0'  ) R_Outcome0  = R_Outcome0  +1;
17229 +          WHEN( '1'  ) R_Outcome1  = R_Outcome1  +1;
17230 +       END;
17231 + END;
17232 +
17233 +****************************************************************;
17234 +******          END OF DECISION TREE SCORING CODE         ******;
17235 +****************************************************************;
17236 +
17237 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17238  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TEST.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
17239  quit;
17240  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
17242  proc sort data=WORK.EM_USER_REPORT;
17243  by ID VIEW;
17244  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17245  *------------------------------------------------------------*;
17246  * Tree2: Computing metadata for TRAIN data;
17247  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
17635  data WORK.MODELTEMP_INFO;
17636  set EMWS1.Tree2_EMINFO;
17637  where DATA='Tree2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
17638  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_EMINFO.
      WHERE (DATA='Tree2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17639  data EMWS1.Tree2_EMINFO;
17640  length TARGET KEY $32 DATA $43;
17641  input TARGET KEY DATA $;
17642  cards;
 
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17646  run;
17647  data EMWS1.Tree2_EMINFO;
17648  set EMWS1.Tree2_EMINFO WORK.MODELTEMP_INFO;
17649  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17650  proc sort data = EMWS1.Tree2_EMINFO NOTHREADS;
17651  by TARGET KEY;
17652  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS1.TREE2_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                December 19, 2019
Time:                16:27:41
*------------------------------------------------------------*
17676  data EMWS1.Tree2_EMOUTFIT;
17677  set EMWS1.Tree2_EMOUTFIT;
17678  length TargetLabel $200;
17679  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
17680  if upcase(TARGET) eq "OUTCOME" then TargetLabel = 'Outcome';
17681  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17682  proc sort data=EMWS1.Tree2_EMREPORTFIT nothreads;
17683  by TARGET;
17684  run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The data set EMWS1.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17685  %let _EMwarndup = 0;
17686  %let _EMtargetdup =;
17687  %let _EMASEtargetdup =;
17688  data _null_;
17689  set EMWS1.Tree2_EMOUTFIT;
17690  if .<_ASE_<0.000001 then do;
17691  call symput('_EMwarndup', '1');
17692  call symput('_EMtargetdup', target);
17693  call symput('_EMASEtargetdup', put(_ASE_, best.));
17694  end;
17695  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
*
*
* WARNING: The computed Average Squared Error for Outcome is 0.
* NOTE: This indicates a possible target duplication issue.
* NOTE: Please review the list of inputs used in the model.
*
*
*------------------------------------------------------------*
17696  filename _emwarn 'C:\Users\Forge 15 i7\Documents\DataMining\DM\Workspaces\EMWS1\Tree2\EMWARN.txt' encoding="UTF-8" NOBOM;
 
17697  %let EMEXCEPTIONSTRING=;
17698  *------------------------------------------------------------*;
17699  * REPORT: Tree2;
17700  *------------------------------------------------------------*;
17701  %let EM_ACTION = REPORT;
17702  %let syscc = 0;
17703  %macro main;
17704
17705    %if %upcase(&EM_ACTION) = CREATE %then %do;
17706      filename temp catalog 'sashelp.emmodl.tree_create.source';
17707      %include temp;
17708      filename temp;
17709
17710      %em_tree_create;
17711    %end;
17712
17713     %else
17714     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17715
17716         filename temp catalog 'sashelp.emmodl.tree_train.source';
17717         %include temp;
17718         filename temp;
17719         %em_tree_train;
17720     %end;
17721
17722    %else
17723    %if %upcase(&EM_ACTION) = SCORE %then %do;
17724      filename temp catalog 'sashelp.emmodl.tree_score.source';
17725      %include temp;
17726      filename temp;
17727
17728      %em_tree_score;
17729
17730    %end;
17731
17732    %else
17733    %if %upcase(&EM_ACTION) = REPORT %then %do;
17734
17735         filename temp catalog 'sashelp.emmodl.tree_report.source';
17736         %include temp;
17737         filename temp;
17738
17739         %em_tree_report;
17740     %end;
17741
17742    %else
17743    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17744
17745         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17746         %include temp;
17747         filename temp;
17748         %EM_TREE_OPENTREEVIEWER;
17749
17750     %end;
17751
17752    %else
17753    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17754
17755         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17756         %include temp;
17757         filename temp;
17758         %EM_TREE_CLOSETREEVIEWER;
17759
17760     %end;
17761
17762
17763     %doendm:
17764  %mend main;
17765
17766  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
17768 +%macro em_tree_makePlotDs( multipleTar= );
17770 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
17771 +  %EM_GETNAME(key=OUTNODES, type=DATA);
17772 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
17773 +  %EM_GETNAME(key=OUTRULES, type=DATA);
17775 +  /* determine if validation statistics will be displayed */
17776 +  %let validflag=N;
17777 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
17778 +    /* determine if validation data exists */
17779 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
17780 +      %let validflag=Y;
17781 +    %end;
17782 +  %end;
17784 +   /* retrieve name of decmeta even in presence of multiple targets */
17785 +   %let decmeta = ;
17786 +   %if &EM_DEC_DECMETA eq %then %do;
17787 +     data _Target;
17788 +       set &em_data_variableset;
17789 +       where ROLE='TARGET' and USE in('D', 'Y');
17790 +       keep NAME;
17791 +     run;
17792 +     proc sort data=_Target;
17793 +       by NAME;
17794 +     run;
17795 +     proc sort data=EM_TARGETDECINFO;
17796 +       by TARGET;
17797 +     run;
17798 +     data _Target;
17799 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
17800 +       by NAME;
17801 +       if _a then do;
17802 +         call symput('decmeta', trim(DECMETA));
17803 +       end;
17804 +     run;
17805 +     proc delete data=_Target;run;
17806 +   %end;
17807 +   %else %let decmeta = &EM_DEC_DECMETA;
17810 +  /* retrieve targetEvent from decmeta */
17811 +  %let targetEvent=;
17812 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
17813 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17814 +      data _null_;
17815 +       set &DECMETA(where=(_TYPE_="TARGET"));
17816 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
17817 +      run;
17818 +    %end;
17819 +  %end;
17821 +  /* retrieve predicted var for targetEvent from decmeta */
17822 +  %let predTarget=;
17823 +  %let predLvl=;
17824 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
17825 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17826 +      data _null_;
17827 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
17828 +       call symput('predTarget', strip(VARIABLE));
17829 +       call symput('predLvl', strip(LEVEL));
17830 +      run;
17831 +    %end;
17832 +  %end;
17833 +  %else %do;
17834 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17835 +      data _null_;
17836 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
17837 +       call symput('predTarget', strip(VARIABLE));
17838 +      run;
17839 +    %end;
17840 +  %end;
17842 +  /* create BelowText value */
17843 +  data belowtext;
17844 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
17845 +    keep node belowtext;
17846 +  run;
17848 +  /* relace belowtext with variable label if it exists */
17849 +  data belowtext2;
17850 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
17851 +    keep node belowtextlbl;
17852 +  run;
17854 +  proc sort data=belowtext; by node; run;
17855 +  proc sort data=belowtext2; by node; run;
17857 +  data belowtext;
17858 +    merge belowtext belowtext2(in=_a);
17859 +    by node;
17860 +    if _a then belowtext=belowtextlbl;
17861 +    keep node belowtext;
17862 +  run;
17864 +  /* create AboveText value */
17865 +  data abovetext;
17866 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
17867 +  run;
17868 +  proc sort data=abovetext; by node numeric_value; run;
17870 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
17871 +  data abovetext;
17872 +    set abovetext(rename=(node=parent));
17873 +    by parent numeric_value;
17874 +    retain abovetext tempstring flag branch origval origchar ;
17875 +    length abovetext $256;
17876 +    length tempstring origchar $64;
17878 +    if STAT in ("INTERVAL", "ORDINAL") then do;
17879 +      if first.parent then do;
17880 +        if missing(character_value) then do;
17881 +          numeric_value = round(numeric_value, &sp_precision);
17882 +          abovetext = "< "||strip(NUMERIC_VALUE);
17883 +          branch = 1;
17884 +          origval = numeric_value;
17885 +          output;
17886 +        end;
17887 +        else do;
17888 +          abovetext = "< "||strip(CHARACTER_VALUE);
17889 +          branch = 1;
17890 +          origchar = character_value;
17891 +          output;
17892 +        end;
17894 +        if first.parent AND last.parent then do;
17895 +          if missing(character_value) then do;
17896 +            numeric_value = round(numeric_value, &sp_precision);
17897 +            branch = branch + 1;
17898 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17899 +            output;
17900 +          end;
17901 +          else do;
17902 +            branch = branch + 1;
17903 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17904 +            output;
17905 +          end;
17906 +        end;
17907 +      end;
17908 +      else if last.parent then do;
17909 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
17910 +          if missing(character_value) then do;
17911 +            numeric_value = round(numeric_value, &sp_precision);
17912 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
17913 +          end;
17914 +          else do;
17915 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
17916 +          end;
17917 +          branch = branch + 1;
17918 +          output;
17920 +          if missing(character_value) then do;
17921 +            numeric_value = round(numeric_value, &sp_precision);
17922 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17923 +          end;
17924 +          else do;
17925 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17926 +          end;
17927 +          branch = branch + 1;
17928 +          output;
17929 +        end;
17930 +        else do;
17931 +          if missing(character_value) then do;
17932 +            numeric_value = round(numeric_value, &sp_precision);
17933 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17934 +          end;
17935 +          else do;
17936 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17937 +          end;
17938 +          branch = branch + 1;
17939 +          output;
17940 +        end;
17941 +      end;
17942 +      else do;
17943 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
17944 +          if missing(character_value) then do;
17945 +            numeric_value = round(numeric_value,&sp_precision);
17946 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
17947 +            origval = numeric_value;
17948 +          end;
17949 +          else do;
17950 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
17951 +            origchar = character_value;
17952 +          end;
17953 +          branch = branch + 1;
17954 +          output;
17956 +        end;
17957 +        else do;
17958 +          if missing(character_value) then do;
17959 +            numeric_value = round(numeric_value, &sp_precision);
17960 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17961 +            origval = numeric_value;
17962 +          end;
17963 +          else do;
17964 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17965 +            origval = character_value;
17966 +          end;
17967 +          branch = branch + 1;
17968 +          output;
17969 +        end;
17970 +      end;
17971 +    end;
17972 +    else do;
17973 +       if first.numeric_value then do;
17974 +         flag = 0;
17975 +         abovetext = strip(CHARACTER_VALUE);
17976 +         branch = numeric_value;
17977 +         if first.numeric_value AND last.numeric_value then do;
17978 +           output;
17979 +         end;
17980 +       end;
17981 +       else if last.numeric_value then do;
17982 +         if flag=0 then do;
17983 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
17984 +           length = length(strip(tempstring));
17985 +           if length < 32 then do;
17986 +             abovetext = strip(tempstring);
17987 +           end;
17988 +           else do;
17989 +             abovetext = strip(abovetext)||", ...";
17990 +             flag = 1;
17991 +           end;
17992 +         end;
17993 +         branch = numeric_value;
17994 +         output;
17995 +       end;
17996 +       else do;
17997 +         if flag=0 then do;
17998 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
17999 +           length = length(strip(tempstring));
18000 +           if length < 32 then do;
18001 +             abovetext = strip(tempstring);
18002 +           end;
18003 +           else do;
18004 +             abovetext = strip(abovetext)||", ...";
18005 +             flag=1;
18006 +           end;
18007 +         end;
18008 +         branch = numeric_value;
18009 +       end;
18010 +    end;
18011 +    keep parent branch abovetext;
18012 +  run;
18014 +  /* MIssing value to abovetext */
18015 +  data tempmissing;
18016 +    set &EM_USER_OUTRULES;
18017 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18018 +    rename node=parent numeric_value=branch character_value=misschar;
18019 +  run;
18022 +  proc sort data=abovetext; by parent branch; run;
18023 +  proc sort data=tempmissing; by parent branch; run;
18024 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18026 +  data tempoutnodes;
18027 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18028 +    by parent branch;
18029 +    length traintotal validtotal 8;
18030 +    retain traintotal validtotal;
18032 +    if _a then do;
18033 +      if ^MISSING(abovetext) then do;
18034 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18035 +      end;
18036 +      else do;
18037 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18038 +      end;
18039 +    end;
18040 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18042 +    if node=1 then do;
18043 +      traintotal = N;
18044 +      validtotal=VN;
18045 +    end;
18047 +    drop role rank stat misschar belowtext;
18048 +  run;
18049 +  proc sort data=tempoutnodes; by node; run;
18050 +  proc sort data=belowtext; by node; run;
18052 +  data tempoutnodes;
18053 +    merge tempoutnodes belowtext;
18054 +    by node;
18056 +  run;
18058 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18059 +  %let adjusted = N;
18060 +  %let npriors = 0;
18061 +  data _null_ ;
18062 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18063 +    if eof then do ;
18064 +      call symput("npriors" , strip(put(_N_,best.))) ;
18065 +    end;
18066 +  run;
18067 +  %if &npriors gt 0 %then %let adjusted=Y;
18070 +  /* create a table with targetUsed and targetLevel columns for each node */
18071 +  data temptarmeta;
18072 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18073 +    %if &multipleTar eq N %then %do;
18074 +      AND USE in ('D', 'Y')
18075 +    %end;
18076 +    ));
18077 +    length TARGET $32;
18078 +    Target=name;
18079 +    keep target level;
18080 +  run;
18082 +  %if &multipleTar eq Y %then %do;
18083 +    data temptargetused;
18084 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18085 +      keep node target;
18086 +    run;
18087 +    proc sort data=temptargetused; by target; run;
18088 +    proc sort data=temptarmeta; by target; run;
18089 +    data temptargetused;
18090 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18091 +      by target;
18092 +      if _a and _b;
18093 +    run;
18094 +  %end;
18095 +  %else %do;
18096 +    data temptargetused;
18097 +      set &EM_USER_OUTSTATS;
18098 +      length target $32 tarlevel $10;
18099 +      target="%EM_TARGET";
18100 +      tarlevel="%EM_TARGET_LEVEL";
18101 +      keep node target tarlevel;
18102 +    run;
18103 +    proc sort data=temptargetused nodupkey; by node; run;
18104 +  %end;
18106 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18107 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18108 +  proc sort data=temptargetused; by node; run;
18111 +  /* create tables for all interval targets as well as all class targets */
18112 +  data tempinterval tempclass;
18113 +    merge tempoutstats temptargetused( rename=(target=targetused));
18114 +    by node;
18115 +    %if "&multipleTar" eq "Y" %then %do;
18116 +      if ((missing(Target)) OR (target=targetused ));
18117 +    %end;
18119 +    if tarlevel="INTERVAL" then output tempinterval;
18120 +    else output tempclass;
18121 +  run;
18123 +  /* iniitalize intTarget and classTarget flags */
18124 +  %let em_intNobs =0;
18125 +  %let em_classNobs = 0;
18126 +  %let em_intTarget= N;
18127 +  %let em_classTarget= N;
18129 +  proc sql;
18130 +    reset noprint;
18131 +    select count(*) into :em_intNobs from tempinterval;
18132 +  quit;
18133 +  proc sql;
18134 +    reset noprint;
18135 +    select count(*) into :em_classNobs from tempclass;
18136 +  quit;
18138 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18139 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18141 +  /* retrieve all information for interval targets */
18142 +  %if &em_intTarget eq Y %then %do;
18144 +    /* determine if leaf variable exists */
18145 +    %let dsid=%sysfunc(open(tempinterval,i));
18146 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18147 +    %let rc=%sysfunc(close(&dsid));
18149 +    proc transpose data=tempinterval
18150 +      %if &leafexists %then %do;
18151 +        (drop=leaf)
18152 +      %end;
18153 +      %if &validexist %then %do;
18154 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18155 +      %end;
18156 +      %else %do;
18157 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18158 +      %end;
18159 +      by node;
18160 +      id statname;
18161 +    run;
18162 +    data tempinterval;
18163 +      set tempinterval;
18164 +      if missing(N) then delete;
18165 +    run;
18166 +  %end;
18168 +  /* retrieve all information for class targets */
18169 +  %if &em_classTarget eq Y %then %do;
18170 +    proc sort data=tempclass; by node category; run;
18171 +    %if &validflag eq N %then %do;
18172 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18173 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18174 +    %end;
18175 +    %else %do;
18176 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18177 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18178 +    %end;
18179 +      set tempclass;
18181 +      %if &validflag eq N %then %do;
18182 +        %if "&adjusted" eq "N" %then %do;
18183 +          if statname="N" then output tempn;
18184 +        %end;
18185 +        %else %do;
18186 +          if statname="NPRIORS" then output tempn;
18187 +        %end;
18188 +        else if statname="PREDICTION" then output temppredict;
18189 +        else if statname="PROBABILITY" then output tempprob;
18190 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18191 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18192 +      %end;
18193 +      %else %do;
18194 +        %if "&adjusted" eq "N" %then %do;
18195 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18196 +        %end;
18197 +        %else %do;
18198 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18199 +        %end;
18200 +        else if statname="PREDICTION" then output temppredict;
18201 +        else if statname="PROBABILITY" then output tempprob;
18202 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18203 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18204 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18205 +      %end;
18206 +    run;
18209 +    /* determine if profit/loss exists in tempprofit */
18210 +    %let em_profitflag=0;
18211 +    %let em_lossflag=0;
18212 +    proc sql;
18213 +      reset noprint;
18214 +      select count(*) into :em_profitflag from tempprofit;
18215 +    quit;
18216 +    proc sql;
18217 +      reset noprint;
18218 +      select count(*) into :em_lossflag from temploss;
18219 +    quit;
18221 +    %if &validFlag eq Y %then %do;
18222 +      proc transpose data=tempn
18223 +        %if "&adjusted" eq "N" %then %do;
18224 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18225 +        %end;
18226 +        %else %do;
18227 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18228 +        %end;
18229 +        by node;
18230 +        id statname;
18231 +      run;
18232 +      %if &em_profitflag ne 0 %then %do;
18233 +        proc transpose data=tempprofit out=tempprofit;
18234 +          by node category;
18235 +          id statname ;
18236 +        run;
18237 +      %end;
18238 +      %if &em_lossflag ne 0 %then %do;
18239 +        proc transpose data=temploss out=temploss;
18240 +          by node category;
18241 +          id statname ;
18242 +        run;
18243 +      %end;
18244 +      data tempprob;
18245 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18246 +        by node
18247 +        %if &multipleTar eq Y %then %do;
18248 +          target
18249 +        %end;
18250 +        category;
18251 +      run;
18252 +    %end;
18254 +    /* store percentcorrect value */
18255 +    data temppredict;
18256 +      merge tempprob temppredict(in=_a);
18257 +      by node category;
18258 +      if _a then do;
18259 +        percentCorrect = statvalue;
18260 +        %if &validFlag eq Y %then %do;
18261 +          vpercentCorrect= vstatvalue;
18262 +        %end;
18263 +      end;
18264 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18265 +      %if &validFlag eq Y %then %do;
18266 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18267 +      %end;
18268 +      ;
18269 +      if missing(percentCorrect) then delete;
18270 +      drop target;
18271 +    run;
18273 +    /* build profittext */
18274 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18275 +      data tempprofittext(keep= node profittext profitloss);
18276 +        length profittext $800 profitloss 8.;
18277 +        retain profittext profitloss;
18279 +        merge tempprob
18280 +        %if &em_profitflag ne 0 %then %do;
18281 +          tempprofit
18282 +        %end;
18283 +        %else %if &em_lossflag ne 0 %then %do;
18284 +          temploss
18285 +        %end;
18286 +        ;
18287 +        by node category;
18289 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18290 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18291 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18292 +          %let profittype = ALL;
18293 +        %end;
18295 +        /* create the profitloss variable for nodecolor if selected */
18296 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18298 +        %if "&profittype" eq "ALL" %then %do;
18299 +          if strip(CATEGORY)="&targetEvent" then do;
18300 +            profitloss=statvalue;
18301 +          end;
18302 +          if first.node then do;
18303 +            %if &validFlag eq N %then %do;
18304 +             %if &em_profitflag ne 0 %then %do;
18305 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18306 +             %end;
18307 +             %if &em_lossflag ne 0 %then %do;
18308 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18309 +             %end;
18310 +            %end;
18311 +            %else %do;
18312 +             %if &em_profitflag ne 0 %then %do;
18313 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18313!+;
18314 +             %end;
18315 +             %if &em_lossflag ne 0 %then %do;
18316 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18317 +             %end;
18318 +            %end;
18319 +          end;
18320 +          else if last.node then do;
18321 +            %if &validFlag eq N %then %do;
18322 +             %if &em_profitflag ne 0 %then %do;
18323 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18324 +             %end;
18325 +             %if &em_lossflag ne 0 %then %do;
18326 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18327 +             %end;
18328 +             /*if CATEGORY="&targetEvent" then do;
18329 +               profitloss=statvalue;
18330 +             end;*/
18331 +            %end;
18332 +            %else %do;
18333 +             %if &em_profitflag ne 0 %then %do;
18334 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18334!+14.&EM_PROPERTY_SPLITPRECISION);
18335 +                if CATEGORY="&targetEvent" then do;
18336 +                 profitloss=ALTERNATIVE_PROFIT;
18337 +                end;
18338 +             %end;
18339 +             %if &em_lossflag ne 0 %then %do;
18340 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18340!+14.&EM_PROPERTY_SPLITPRECISION);
18341 +                if CATEGORY="&targetEvent" then do;
18342 +                  profitloss=ALTERNATIVE_LOSS;
18343 +                end;
18344 +             %end;
18345 +            %end;
18346 +            output;
18347 +          end;
18348 +          else do;
18349 +            %if &validFlag eq N %then %do;
18350 +             %if &em_profitflag ne 0 %then %do;
18351 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18352 +             %end;
18353 +             %if &em_lossflag ne 0 %then %do;
18354 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18355 +             %end;
18356 +            %end;
18357 +            %else %do;
18358 +             %if &em_profitflag ne 0 %then %do;
18359 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18359!+14.&EM_PROPERTY_SPLITPRECISION);
18360 +             %end;
18361 +             %if &em_lossflag ne 0 %then %do;
18362 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18362!+14.&EM_PROPERTY_SPLITPRECISION);
18363 +             %end;
18364 +            %end;
18365 +          end;
18366 +        %end;
18367 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18368 +          if strip(CATEGORY) = "&targetevent" then do;
18369 +            %if &validFlag eq N %then %do;
18370 +             %if &em_profitflag ne 0 %then %do;
18371 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18372 +             %end;
18373 +             %if &em_lossflag ne 0 %then %do;
18374 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18375 +             %end;
18376 +             profitloss=statvalue;
18377 +            %end;
18378 +            %else %do;
18379 +             %if &em_profitflag ne 0 %then %do;
18380 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18380!+;
18381 +                profitloss=ALTERNATIVE_PROFIT;
18382 +             %end;
18383 +             %if &em_lossflag ne 0 %then %do;
18384 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18385 +                profitloss=ALTERNATIVE_LOSS;
18386 +             %end;
18387 +            %end;
18388 +            output;
18389 +          end;
18390 +        %end;
18391 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18392 +          if strip(CATEGORY) = "&targetevent" then do;
18393 +            %if &validFlag eq N %then %do;
18394 +             profitloss=statvalue;
18395 +            %end;
18396 +            %else %do;
18397 +             %if &em_profitflag ne 0 %then %do;
18398 +                profitloss=ALTERNATIVE_PROFIT;
18399 +             %end;
18400 +             %if &em_lossflag ne 0 %then %do;
18401 +                profitloss=ALTERNATIVE_LOSS;
18402 +             %end;
18403 +            %end;
18404 +            output;
18405 +          end;
18406 +        %end;
18407 +      run;
18408 +    %end;
18410 +    data tempprob(keep= node probtext);
18411 +      length probtext $800;
18412 +      retain probtext;
18413 +      set tempprob ;
18414 +      by node;
18416 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18417 +      %let probtype = &EM_PROPERTY_TARGET;
18418 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18419 +        %let probtype = ALL;
18420 +      %end;
18422 +      %if "&probtype" eq "ALL" %then %do;
18423 +        if first.node then do;
18424 +          %if &validFlag eq N %then %do;
18425 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18426 +          %end;
18427 +          %else %do;
18428 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18429 +          %end;
18430 +        end;
18431 +        else if last.node then do;
18432 +          %if &validFlag eq N %then %do;
18433 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18434 +          %end;
18435 +          %else %do;
18436 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18437 +          %end;
18438 +          output;
18439 +        end;
18440 +        else do;
18441 +          %if &validFlag eq N %then %do;
18442 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18443 +          %end;
18444 +          %else %do;
18445 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18446 +          %end;
18447 +        end;
18448 +      %end;
18449 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18450 +        if strip(CATEGORY) = "&targetevent" then do;
18451 +          %if &validFlag eq N %then %do;
18452 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18453 +          %end;
18454 +          %else %do;
18455 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18456 +          %end;
18457 +          output;
18458 +        end;
18459 +      %end;
18460 +      %else %if "&probtype" eq "NONE" %then %do;
18461 +        if last.node then do;
18462 +          output;
18463 +        end;
18464 +      %end;
18465 +    run;
18466 +  %end;
18468 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18470 +  %let oldexists=0;
18471 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18472 +     data old_tree_plot;
18473 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18474 +        rename nodecolor=oldnodecolor;
18475 +     run;
18477 +     proc sort data=old_tree_plot;
18478 +        by node;
18479 +     run;
18481 +     %let oldexists=1;
18482 +  %end;
18484 +  data &EM_USER_TREE_PLOT;
18485 +    length textall $800;
18486 +    merge tempoutnodes temptargetused
18488 +    %if &em_intTarget eq Y %then %do;
18489 +      tempinterval
18490 +    %end;
18492 +    %if &em_classTarget eq Y %then %do;
18494 +      %if &validFlag eq N %then %do;
18495 +        tempn(rename=(statvalue=N))
18496 +      %end;
18497 +      %else %do;
18498 +        tempn
18499 +      %end;
18501 +      temppredict tempprob
18503 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18504 +        tempprofittext
18505 +      %end;
18506 +    %end;
18507 +    ;
18508 +    by node;
18510 +    /* build nodetext based on user selection */
18511 +    textall="";
18513 +    %if &em_intTarget eq Y %then %do;
18514 +    if tarlevel="INTERVAL" then do;
18515 +      /* Nodeid */
18516 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18517 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18518 +      %end;
18520 +      /* Target identifier if multiple targets are used */
18521 +      %if "&multipleTar" eq "Y" %then %do;
18522 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18523 +      %end;
18525 +      %if &validFlag eq Y %then %do;
18526 +         /* Column labels displayed in validflag eq Y only */
18527 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18528 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18528!+noquote ))";
18529 +         %end;
18531 +         /* Average values */
18532 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18533 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18534 +         %end;
18536 +         /* RASE */
18537 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18538 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18539 +         %end;
18541 +         /* Count */
18542 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18543 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18544 +         %end;
18545 +      %end;
18546 +      %else %do;
18547 +         /* Average values */
18548 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18549 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18550 +         %end;
18552 +         /* RASE */
18553 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18554 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18555 +         %end;
18557 +         /* Count */
18558 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18559 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18560 +         %end;
18561 +      %end;
18563 +      /* nodecolor */
18564 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18565 +        nodecolor=PREDICTION;
18566 +      %end;
18567 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18568 +        nodecolor=RASE;
18569 +      %end;
18570 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18571 +        nodecolor=1;
18572 +      %end;
18574 +    end;
18575 +    %end;
18576 +    %if &em_classTarget eq Y %then %do;
18577 +    if tarlevel^="INTERVAL" then  do;
18579 +      /* Nodeid */
18580 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18581 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18582 +      %end;
18583 +      /* Target identifier if multiple targets are used */
18584 +      %if "&multipleTar" eq "Y" %then %do;
18585 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18586 +      %end;
18588 +      /* Predicted values */
18589 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18590 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18591 +      %end;
18593 +      /* Column labels displayed in validflag eq Y only */
18594 +      %if "&ValidFlag" eq "Y" %then %do;
18595 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18596 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18596!+noquote ))";
18597 +        %end;
18598 +      %end;
18600 +      /* Target Values */
18601 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18602 +        textall=strip(textall)||"0A"x||strip(probtext);
18603 +      %end;
18605 +      /* include profit or loss for all target levels */
18606 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18607 +        textall=strip(textall)||"0A"x||strip(profittext);
18608 +      %end;
18610 +      %if &validFlag eq N %then %do;
18611 +        /* Percent Correct */
18612 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18613 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18614 +        %end;
18616 +         /* Count */
18617 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18618 +          %if "&adjusted" eq "N" %then %do;
18619 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18620 +          %end;
18621 +          %else %do;
18622 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
18623 +          %end;
18624 +         %end;
18625 +      %end;
18626 +      %else %do;
18627 +        /* Percent Correct */
18628 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18629 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
18630 +        %end;
18632 +         /* Count */
18633 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18634 +          %if "&adjusted" eq "N" %then %do;
18635 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
18636 +          %end;
18637 +          %else %do;
18638 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
18639 +          %end;
18640 +         %end;
18641 +      %end;
18643 +      /* nodecolor */
18644 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
18645 +       %if &multipleTar ne Y %then %do;
18646 +        nodecolor=&predTarget;
18647 +       %end;
18648 +       %else %do;
18649 +         nodecolor=percentcorrect;
18650 +       %end;
18651 +      %end;
18652 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
18653 +        nodecolor=percentcorrect;
18654 +      %end;
18655 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
18656 +        nodecolor=1;
18657 +      %end;
18658 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
18659 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
18660 +          nodecolor=percentcorrect;
18661 +        %end;
18662 +        %else %do;
18663 +          nodecolor=profitloss;
18664 +        %end;
18665 +      %end;
18667 +    end;
18668 +    %end;
18669 +    %if &em_intTarget eq Y %then %do;
18670 +     drop  PREDICTION  TARGET TARLEVEL
18671 +     %if &ValidFlag eq Y %then %do;
18672 +         VPREDICTION
18673 +     %end;
18674 +     ;
18675 +    %end;
18676 +    %if &em_classTarget eq Y %then %do;
18677 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
18678 +     %if &ValidFlag eq Y %then %do;
18679 +         VSTATVALUE
18680 +     %end;
18681 +     ;
18682 +    %end;
18684 +  run;
18686 +  /* add leaf index information to plotds - based on primary target only*/
18687 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18688 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18689 +      set &EM_USER_OUTSTATS;
18690 +      if ((statname="PROBABILITY"
18691 +      %if &validexist %then %do;
18692 +       or statname="VALID: PROBABILITY"
18693 +      %end;
18694 +      ) AND (CATEGORY="&TARGETEVENT")
18695 +      %if "&multipleTar" eq "Y" %then %do;
18696 +        AND (Target="%EM_TARGET")
18697 +      %end;
18698 +      );
18699 +    run;
18701 +    %if &validexist %then %do;
18702 +      proc sort data=tempprob; by node; run;
18703 +      %let vpredTarget = V%substr(&predTarget, 2);
18704 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
18705 +         by node;
18706 +         id statname;
18707 +      run;
18708 +    %end;
18709 +  %end;
18710 +  %else %do;
18711 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18712 +      set &EM_USER_OUTSTATS;
18713 +      if ((statname="PREDICTION"
18714 +      %if &validexist %then %do;
18715 +       or statname="VALID: PREDICTION"
18716 +      %end;
18717 +      )
18718 +      %if "&multipleTar" eq "Y" %then %do;
18719 +        AND (Target="%EM_TARGET")
18720 +      %end;
18721 +      );
18722 +    run;
18723 +    %if &validexist %then %do;
18724 +      proc sort data=tempprob; by node; run;
18725 +      %let vpredTarget = V%substr(&predTarget, 2);
18726 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
18727 +         by node;
18728 +         id statname;
18729 +      run;
18730 +    %end;
18731 +  %end;
18733 +  proc sort data=tempprob; by node; run;
18734 +  data tempoutnodes;
18735 +    merge tempoutnodes tempprob;
18736 +    by node;
18737 +  run;
18739 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
18740 +  data tempnodes;
18741 +    retain traintotal validtotal;
18742 +    set tempnodes(where=(leaf ne . ));
18743 +    tprob=round(&predTarget, .01);
18744 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18745 +      percevent_train=round(tprob*100, .01);
18746 +    %end;
18747 +    %else %do;
18748 +      percevent_train=tprob;
18749 +    %end;
18751 +    perc_train=round((n/traintotal)*100, 0.01);
18752 +    /* leafwidth already has a *10 multiplier */
18753 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
18755 +    %if &validexist %then %do;
18756 +      %let vpredTarget = V%substr(&predTarget,2);
18757 +      vprob=round(&vpredTarget, .01);
18758 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18759 +        percevent_valid=round(vprob*100, .01);
18760 +      %end;
18761 +      %else %do;
18762 +        percevent_valid=vprob;
18763 +      %end;
18764 +      perc_valid=round((vn/validtotal)*100, .01);
18765 +    %end;
18767 +    index=_N_;
18768 +    keep node index tprob perc_train percevent_train
18769 +    %if &validexist %then %do;
18770 +        vprob percevent_valid perc_valid
18771 +    %end;
18772 +    ;
18773 +  run;
18774 +  proc sort data=tempnodes; by node; run;
18775 +  data &EM_USER_TREE_PLOT;
18776 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
18777 +    by node;
18778 +    if missing(node) then delete;
18779 +    %if &oldexists %then %do;
18780 +      if missing(nodecolor) then nodecolor=oldnodecolor;
18781 +      drop oldnodecolor;
18782 +    %end;
18783 +    abovetext = compbl(abovetext);
18785 +    /* add variable labels */
18786 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
18787 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
18788 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
18789 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
18790 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
18791 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
18793 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18794 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
18795 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
18796 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
18797 +          %end;
18798 +          %else %do;
18799 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
18800 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
18801 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
18802 +          %end;
18803 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
18805 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
18806 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
18807 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18808 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
18809 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
18810 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
18811 +          %end;
18812 +          %else %do;
18813 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
18814 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
18815 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
18816 +          %end;
18817 +    ;
18818 +  run;
18820 +  /* delete temporary tables */
18821 +  proc datasets lib=work nolist;
18822 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
18823 +  run;
18825 +%mend em_tree_makePlotDs;
18829 +%macro em_tree_report;
18831 +   /* report properties */
18832 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
18833 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
18834 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
18835 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
18836 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
18837 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
18838 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
18839 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
18840 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
18841 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
18842 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
18843 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
18844 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
18846 +   %let validexist=0;
18847 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
18848 +     %let validexist=1;
18849 +   %end;
18851 +   /* determine if multiple targets will be processed */
18852 +   %let em_tree_multipleTargets=N;
18853 +   %let em_tree_numTarget=1;
18854 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
18855 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
18856 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
18857 +         %let em_tree_multipleTargets=N;
18858 +      %end;
18859 +      %else %do;
18860 +        data _null_;
18861 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
18862 +          if eof then
18863 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
18864 +        run;
18866 +        %if &em_tree_numTarget gt 1 %then %do;
18867 +           %let em_tree_multipleTargets=Y;
18868 +        %end;
18869 +     %end;
18870 +   %end;
18872 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
18874 +   /* variable importance */
18875 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
18876 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
18878 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
18879 +     /* and the columns may not be generated                                                                                 */
18880 +     %let em_tree_cvexists=;
18881 +     %let em_tree_surrexists=.;
18882 +     data _null_;
18883 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
18884 +       if eof then do ;
18885 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
18886 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
18887 +       end;
18888 +     run;
18890 +     data &EM_USER_OUTIMPORT;
18891 +         set &EM_USER_OUTIMPORT;
18892 +         /* format columns based on Precison value specified */
18893 +         format importance 15.&EM_PROPERTY_PRECISION
18894 +              %if &validexist %then %do;
18895 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
18896 +              %end;
18897 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
18898 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
18899 +              %end;
18900 +         ;
18901 +     run;
18903 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
18904 +     proc print data=&EM_USER_OUTIMPORT
18905 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
18906 +          (where=((nrules>0) OR (nsurrogates>0)))
18907 +        %end;
18908 +        %else %do;
18909 +           (where=(nrules>0))
18910 +        %end;
18911 +        label noobs
18912 +        ;
18913 +     run;
18914 +     title10;
18916 +   %end;
18918 +   /* Sequence */
18919 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
18920 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
18921 +   data _null_ ;
18922 +      set &EM_USER_outseq (obs=2) end=eof ;
18923 +      if eof then do ;
18924 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
18925 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
18926 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
18927 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
18928 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
18929 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
18930 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
18931 +      end;
18932 +    run;
18934 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
18935 +      data &EM_USER_OUTSEQ;
18936 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
18937 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
18938 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18939 +           _XMISC_=_VMISC_
18940 +        %end;
18941 +        %if "&em_tree_aprof" ne "."  %then %do;
18942 +           _XAPROF_=_VAPROF_
18943 +           _XPROF_ = _VPROF_
18944 +        %end;
18945 +        %if "&em_tree_aloss" ne "."  %then %do;
18946 +           _XALOSS_=_VALOSS_
18947 +        %end;
18948 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
18949 +           _XPASE_ = _VPASE_
18950 +           _XPMISC_ = _VPMISC_
18951 +        %end;
18953 +        ));
18954 +     %end;
18955 +     %else %do;
18956 +        set &EM_USER_OUTSEQ;
18957 +     %end;
18959 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
18960 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18961 +            _MISC_   15.&EM_PROPERTY_PRECISION
18962 +         %end;
18963 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
18964 +            _PASE_  15.&EM_PROPERTY_PRECISION
18965 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
18966 +         %end;
18967 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
18968 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
18969 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18970 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
18971 +            %end;
18972 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
18973 +              _VPASE_  15.&EM_PROPERTY_PRECISION
18974 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
18975 +            %end;
18976 +         %end;
18977 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
18978 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
18979 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18980 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
18981 +            %end;
18982 +         %end;
18983 +         %if "&em_tree_seq" ne "." %then %do;
18984 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
18985 +         %end;
18986 +         %if "&em_tree_vseq" ne "." %then %do;
18987 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
18988 +         %end;
18989 +         %if "&em_tree_aprof" ne "." %then %do;
18990 +           _APROF_ 15.&EM_PROPERTY_PRECISION
18991 +           _PROF_ 15.&EM_PROPERTY_PRECISION
18992 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
18993 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
18994 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
18995 +           %end;
18996 +         %end;
18997 +         %else %if "&em_tree_aloss" ne "." %then %do;
18998 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
18999 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19000 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19001 +           %end;
19002 +         %end;
19003 +      ;
19004 +    run;
19005 +   %end;
19007 +   /* Observation Based Importance */
19008 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19010 +      /* need to check for 0 obs */
19011 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19012 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19013 +      %let rc=%sysfunc(close(&dsid));
19015 +      %if &onobs %then %do;
19016 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19017 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19019 +         data &EM_USER_OUTOBSIMP;
19020 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19021 +           if _a;
19022 +           by _INPUT1_;
19023 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19024 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19025 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19026 +                   %end;
19027 +                   ;
19028 +         run;
19029 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19030 +      %end;
19031 +   %end;
19033 +  %end;
19035 +  /* create dataset to support tree diagram and icicle plot */
19036 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19037 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19039 +  /* display tree diagram */
19040 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19041 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19043 +  /* display icicle diagram */
19044 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19045 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19047 +  /* Leaf Statistics Plot */
19048 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19050 +  /* print leaf information to output window */
19051 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19053 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19054 +       by descending N;
19055 +     run;
19057 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19058 +     %local vn;
19059 +     data _null_;
19060 +       set t (obs=2) end=eof;
19061 +       if eof then do;
19062 +         call symput("vn", strip(put(vn, best.)));
19063 +       end;
19064 +     run;
19066 +     data t;
19067 +       set t;
19068 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19069 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19070 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19071 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19072 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19073 +       %end;
19074 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19075 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19076 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19077 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19078 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19079 +          %end;
19080 +       %end;
19081 +       ;
19082 +     run;
19084 +     /* determine if rase is found in t */
19085 +    %let dsid=%sysfunc(open(t,i));
19086 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19087 +    %let rc=%sysfunc(close(&dsid));
19089 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19090 +     proc print data=t noobs label;
19091 +       where tprob ne .;
19092 +       var node depth N tprob
19093 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19094 +         %if "&vn" ne "." %then %do;
19095 +           VN
19096 +         %end;
19097 +         vprob
19098 +       %end;
19099 +       %if &raseexists %then %do;
19100 +            RASE
19101 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19102 +              VRASE
19103 +            %end;
19104 +       %end;
19105 +       ;
19106 +     run;
19107 +     title10;
19108 +  %end;
19110 +  /* create plots that are done during training of node */
19111 +  /* display iterative plot, including reference line */
19112 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19113 +   /* %if &nleaves eq  %then %do; */
19114 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19115 +      data _null_;
19116 +        set &EM_USER_OUTTOPOLOGY end=eof;
19117 +        if eof then do;
19118 +          call symput('nleaves', LEAF);
19119 +        end;
19120 +      run;
19121 +   /* %end; */
19123 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19124 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19125 +  %end;
19127 +  /* display leaf statistics */
19128 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19130 +  /* stats by node if multiple targets = Y */
19131 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19132 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19133 +    data &EM_USER_OUTSTATS;
19134 +      set &EM_USER_OUTSTATS;
19136 +     * if STATNAME="TARGET" then delete;
19137 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19138 +      drop leaf;
19139 +    run;
19140 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19142 +  %end;
19143 +  %else %do;
19144 +    /* add outstats and outdescribe to spk but not results */
19145 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19146 +  %end;
19148 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _VASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 2 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_OUTCOME_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_OUTCOME_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 1 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 1 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 1 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 22 observations read from the data set EMWS1.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 1 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 3 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable VN is uninitialized.
NOTE: There were 2 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 3 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 1 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 3 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 3 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 1 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 1 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 3 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 15 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 12 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 15 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 3 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 15 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 15 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 15 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 3 observations and 2 variables.
NOTE: The data set WORK.TEMPPREDICT has 3 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 6 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 3 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 6 observations read from the data set WORK.TEMPPROB.
NOTE: There were 3 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 3 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1095:196
NOTE: There were 3 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 3 observations read from the data set WORK.TEMPN.
NOTE: There were 3 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 3 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 3 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable VALID__PROBABILITY in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable VALID__PROBABILITY in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 3 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 3 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 3 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 3 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable V_Outcome1 is uninitialized.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      2 at 1233:94    2 at 1237:102   2 at 1237:113   2 at 1241:137   2 at 1241:146   2 at 1241:158
NOTE: There were 2 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 2 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: There were 2 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 3 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 3 observations and 33 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 3 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      310:141
NOTE: There were 3 observations read from the data set EMWS1.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
19149
19150  *------------------------------------------------------------*;
19151  * End REPORT: Tree2;
19152  *------------------------------------------------------------*;
 
19153  /* Reset EM Options */
19154  options formchar="|----|+|---+=|-/\<>*";
19155  options nocenter ls=256 ps=10000;
19156  goptions reset=all device=GIF NODISPLAY;
 
19157  proc sort data=WORK.EM_USER_REPORT;
19158  by ID VIEW;
19159  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19160  proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
19161  by NAME;
19162  run;
 
NOTE: There were 12 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 12 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19163  proc sort data=EMWS1.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19164  by NAME;
19165  run;
 
NOTE: There were 12 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 12 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19166  data WORK.ASSESS_META;
19167  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19168  by NAME;
19169  run;
 
NOTE: There were 12 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 12 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 12 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19170  data EM_temp_assessMeta;
19171  set EMWS1.Tree2_CMeta_TRAIN;
19172  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19173  run;
 
NOTE: There were 10 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 10 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19174  data EM_temp_assessdata;
19175  set EMWS1.Tree2_TRAIN(keep=
19176  F_Outcome
19177  I_Outcome
19178  P_Outcome0
19179  P_Outcome1
19180  Q_Outcome0
19181  Q_Outcome1
19182  R_Outcome0
19183  R_Outcome1
19184  U_Outcome
19185  _WARN_
19186  Outcome
19187  );
19188  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 13 observations read from the data set EMWS1.PART2_TRAIN.
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 13 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 13 observations read from the data set EMWS1.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 13 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
23473   data EM_temp_assessMeta;
23474   set EMWS1.Tree2_CMeta_TRAIN;
23475   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23476   run;
 
NOTE: There were 10 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 10 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23477   data EM_temp_assessdata;
23478   set EMWS1.Tree2_VALIDATE(keep=
23479   F_Outcome
23480   I_Outcome
23481   P_Outcome0
23482   P_Outcome1
23483   Q_Outcome0
23484   Q_Outcome1
23485   R_Outcome0
23486   R_Outcome1
23487   U_Outcome
23488   _WARN_
23489   Outcome
23490   );
23491   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 8 observations read from the data set EMWS1.PART2_VALIDATE.
NOTE: View EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 8 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 8 observations read from the data set EMWS1.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 8 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
27785   %let _cn = %sysfunc(getoption(CENTER));
27786   options nocenter;
27787   proc print data=EMWS1.Tree2_EMREPORTFIT noobs label;
27788   var STAT LABEL TRAIN
27789   VALIDATE
27790   TEST
27791   ;
27792   by TARGET TARGETLABEL;
27793   title9 ' ';
27794   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
27795   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27796   title10;
27797   options &_cn;
 
27798   proc sort data=EMWS1.Tree2_EMCLASSIFICATION nothreads;
27799   by DATAROLE TARGET TARGETLABEL;
27800   run;
 
NOTE: There were 5 observations read from the data set EMWS1.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS1.TREE2_EMCLASSIFICATION has 5 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27801   %let _cn = %sysfunc(getoption(CENTER));
27802   options nocenter;
27803   proc print data=EMWS1.Tree2_EMCLASSIFICATION noobs label;
27804   var from into pct_row pct_col count percent
27805   ;
27806   by DATAROLE TARGET TARGETLABEL;
27807   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
27808   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
27809   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
27810   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
27811   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
27812   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
27813   where _TYPE_='PREDICTION';
27814   title9 ' ';
27815   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
27816   run;
 
NOTE: There were 5 observations read from the data set EMWS1.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27817   title9;
27818   title10;
27819   options &_cn;
 
27820   %let _cn = %sysfunc(getoption(CENTER));
27821   options nocenter;
27822   data EMWS1.Tree2_EMEVENTREPORT;
27823   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
27823 !  8;
27824   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
27824 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
27824 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
27824 ! FALSEEVENT
27825   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
27825 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
27825 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
27826      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
27827   FALSEEVENT=0;
27828   FALSENEVENT=0;
27829   TRUEEVENT=0;
27830   TRUENEVENT=0;
27831   set EMWS1.Tree2_EMEVENTREPORT;
27832   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS1.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27833   proc print data=EMWS1.Tree2_EMEVENTREPORT noobs label;
27834   title9 ' ';
27835   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
27836   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
27837   run;
 
NOTE: There were 2 observations read from the data set EMWS1.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
27838   title10;
27839   options &_cn;
 
27840   proc datasets library=EMWS1 nolist;
27841   modify Tree2_EMRANK;
27842   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
27843   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
27844   run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMRANK.DATA.
27845   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
27846   %let _cn = %sysfunc(getoption(CENTER));
27847   options nocenter;
27848   proc print data=EMWS1.Tree2_EMRANK label noobs;
27849   var
27850   decile gain lift liftc resp respc N _meanP_;
27851   by
27852   notsorted DATAROLE
27853   notsorted TARGET
27854   notsorted TARGETLABEL
27855   ;
27856   title9 ' ';
27857   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
27858   run;
 
NOTE: There were 21 observations read from the data set EMWS1.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27859   title10;
27860   options &_cn;
 
27861   proc datasets library=EMWS1 nolist;
27862   modify Tree2_EMSCOREDIST;
27863   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
27864   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
27865   run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMSCOREDIST.DATA.
27866   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
